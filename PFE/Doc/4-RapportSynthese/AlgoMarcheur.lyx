#LyX 1.6.7 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass amsbook
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\language french
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language french
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Chapter
Algorithme du marcheur
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Présentation de l'algorithme du marcheur : idée + algo.
\end_layout

\end_inset


\end_layout

\begin_layout Section
Présentation générale
\end_layout

\begin_layout Standard
La recherche de solution déjà faite pour répondre à notre problématique
 étant infructueuse, nous avons du imaginer une méthode tenant compte des
 contraintes et permettant d'effectuer une analyse des données pour déterminer
 les lots à contrôler.
 L'idée pour expliquer cet algorithme est assez simple.
 On cherche à déterminer la chance qu'a un marcheur de se faire attaquer
 en marchant dans une grande ville.
 
\end_layout

\begin_layout Standard
Dans notre cas un marcheur est un lot, les quartiers des villes sont des
 machines, les descentes de police dans un quartier sont les tâches qualités
 (
\emph on
MSE
\emph default

\begin_inset Foot
status open

\begin_layout Plain Layout
Mesure Sur Équipement
\end_layout

\end_inset

), et les médecins qui contrôlent l'état de santé d'un marcheur sont des
 contrôles de lots (
\emph on
MSL
\emph default

\begin_inset Foot
status open

\begin_layout Plain Layout
Mesure Sur Lot
\end_layout

\end_inset

).
\end_layout

\begin_layout Standard
Ensuite on définit un indice de santé pour le marcheur, ou fiabilité pour
 le produit.
 Plus cet indice est proche de 
\begin_inset Formula $0$
\end_inset

 plus le marcheur a de chance d'être blessé.
 Ensuite nous faisons quelques hypothèses pour le comportement de la ville
 et des machines :
\end_layout

\begin_layout Itemize
La criminalité d'un quartier augmente de manière linéaire en fonction du
 nombre de marcheurs qui sont passés.
 
\end_layout

\begin_layout Itemize
Si un marcheur est sorti en bonne santé, alors le quartier n'est pas si
 dangereux et la criminalité redescend à niveau seuil.
\end_layout

\begin_layout Section
Détail de l'algorithme
\end_layout

\begin_layout Subsection
Présentation générale
\end_layout

\begin_layout Standard
L'algorithme se décompose de deux parties, tout d'abord on calcule la fiabilité
 d'une machine, et ensuite on s'intéresse à la fiabilité du lot.
 Le calcule de la fiabilité du lot prend en compte la fiabilité de la machine
 (Cf Algorithme 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:Algorithme-du-marcheur"

\end_inset

 et Algorithme 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:Algorithme-Wokstation"

\end_inset

).
 Cet algorithme tient compte des contrôles 
\emph on
MSE
\emph default
 et des 
\emph on
MSL
\emph default
, qui sont les deux leviers possibles pour améliorer la qualité des lots.
 
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "tabsize=4"
inline false
status open

\begin_layout Plain Layout

Algorithm Marcheur	
\end_layout

\begin_layout Plain Layout

	for each batch in ListOfBatchs 
\end_layout

\begin_layout Plain Layout

	Do
\end_layout

\begin_layout Plain Layout

		for each tracability in batch.tracabilities 
\end_layout

\begin_layout Plain Layout

		Do
\end_layout

\begin_layout Plain Layout

			if tracability is a MSL operation then
\end_layout

\begin_layout Plain Layout

				batch.fiability = DEFAULT_FIABILITY_BATCH
\end_layout

\begin_layout Plain Layout

				setFiability(tracability.previousWorkstation) =
\end_layout

\begin_layout Plain Layout

					DEFAULT_FIABILITY_WORKSTATION
\end_layout

\begin_layout Plain Layout

			end if
\end_layout

\begin_layout Plain Layout

			batch.fiability= batch.fiability * 
\end_layout

\begin_layout Plain Layout

				calculateWorkstationFiability(tracability.Workstation)
\end_layout

\begin_layout Plain Layout

		End for
\end_layout

\begin_layout Plain Layout

	End for
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "alg:Algorithme-du-marcheur"

\end_inset

Algorithme du marcheur en séquentiel
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float algorithm
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "tabsize=4"
inline false
status open

\begin_layout Plain Layout

Algorithm du calcule de la fiabilité de la machine	
\end_layout

\begin_layout Plain Layout

	set(FIABILITY_MIN_WORSKATION)
\end_layout

\begin_layout Plain Layout

	for each tracability in Workstation.tracabilities
\end_layout

\begin_layout Plain Layout

	Do
\end_layout

\begin_layout Plain Layout

		if tracability.event is a control operation (MSE or MSL) then
\end_layout

\begin_layout Plain Layout

			Workstation.fiability=DEFAULT_FIABILITY_WORKSTATION
\end_layout

\begin_layout Plain Layout

		else
\end_layout

\begin_layout Plain Layout

			Workstation.fiability=DEFAULT_FIABILITY_WORKSTATION
\end_layout

\begin_layout Plain Layout

									- countNBEventsSinceLastControl(Workstation) * DISTURBANCE_WORSTATION_P
ER_EVENT
\end_layout

\begin_layout Plain Layout

		End if
\end_layout

\begin_layout Plain Layout

// on définit un seuil minimal pour la fiabilité de la machine
\end_layout

\begin_layout Plain Layout

		return max(Workstation.fiability,FIABILITY_MIN_WORSKATION)
\end_layout

\begin_layout Plain Layout

	End for
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "alg:Algorithme-Wokstation"

\end_inset

Algorithme du calcul de fiabilité de la machine
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Implémentation de l'algorithme
\end_layout

\begin_layout Subsection
Choix du langage
\end_layout

\begin_layout Standard
Afin de pouvoir valider notre algorithme nous avons décider de faire un
 prototype pour vérifier son fonctionnement.
 Le choix du language de la maquette s'est porté sur Java pour différentes
 raisons :
\end_layout

\begin_layout Itemize
Clarté du langage.
\end_layout

\begin_layout Itemize
Projet n'étant qu'une maquette et ne servant qu'à la validation de notre
 algorithme.
 La performance n'était donc pas une contrainte
\end_layout

\begin_layout Itemize
C'est un langage maîtrisé au seins de l'équipe.
\end_layout

\begin_layout Itemize
Simplicité de la modélisation.
\end_layout

\begin_layout Itemize
Grand catalogue de fonctionnalités pré-définis.
 
\end_layout

\begin_layout Itemize
Ne nécessite pas l'achat d'une licence d'utilisation.
 
\end_layout

\begin_layout Standard
Pour toutes ces raisons l'utilisation du Java nous a parue évidente.
 Dans la partie suivante nous nous intéressons d'avantage à la description
 de l'implémentation.
\end_layout

\begin_layout Subsection
Package entities
\end_layout

\begin_layout Standard
Ce paquetage contient les entitées virtuelles contenue dans l'usine.
 Il y a la classe 
\emph on
Batch
\emph default
 qui représente un lot en production, il y a de plus la classe 
\emph on
Workstation
\emph default
 qui représent les différentes machines présente dans l'usine.
 Chacune de ces classes contient sa mémoire propre et est capable de calculer
 sa fiabilité et/ou indice de santé (Cf Fig 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:classe-Entities"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:classe-Entities"

\end_inset

Diagramme de classe des différentes entitées
\end_layout

\end_inset


\begin_inset Graphics
	filename ../Images/DiagrammeClassEntities.svg
	lyxscale 40
	width 100col%

\end_inset


\end_layout

\begin_layout Plain Layout
\align center

\emph on
Ce diagramme de classe représente l'ensemble des classes entities, les Batch
 et Workstation contiennent des collections de tracability, qui constituent
 la mémoire de chacun des éléments.
 
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Classe Constants
\end_layout

\begin_layout Standard
Cette classe contient toutes les constantes nécessaire au réglage de notre
 application.
 Ces connaissances faisant d'avantage référence au savoir faire métier,
 les valeurs que nous avons utilisé sont parfaitement arbitraire (Cf Fig
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:classe-Constants"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:classe-Constants"

\end_inset

Diagramme de classe des constantes
\end_layout

\end_inset


\begin_inset Graphics
	filename ../Images/DiagrammeClassConstants.svg
	lyxscale 40
	width 50col%

\end_inset


\end_layout

\begin_layout Plain Layout
\align center

\emph on
Cette classe permet de paramétrer l'ensemble du projet en définissant les
 constantes utilisées dans le projet.
 
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Package Extractors
\end_layout

\begin_layout Standard
Dans cette classe se trouve absolument toutes les classes permettant l'interpret
ation des données de l'usine et d'associer les bonnes instances d'objet
 en conséquent (Cf Fig 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:classe-Extractor"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:classe-Extractor"

\end_inset

Diagramme de classe des extractors
\end_layout

\end_inset


\begin_inset Graphics
	filename ../Images/DiagrameClassExtractors.svg
	lyxscale 40
	width 100col%

\end_inset


\end_layout

\begin_layout Plain Layout
\align center

\emph on
Cet ensemble de classe permet d'affecter les traçabilités au seins des bons
 lots et des bonnes machines
\end_layout

\end_inset


\end_layout

\begin_layout Section
Résultats 
\end_layout

\begin_layout Standard
Le programme s'execute et analyse les 
\begin_inset Formula $400000$
\end_inset

 évenements de l'usine, ce qui représente un mois de production.
 En sortie nous avons un fichier qui indique pour chaque produit son avancement
 dans la production et son indice de santé.
 
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Représentation-des-résultats"

\end_inset

Représentation des résultats après calculs
\end_layout

\end_inset


\begin_inset Graphics
	filename /home/garciaf/SVN/team-war/PFE/Doc/Images/GrapheDonnee.eps
	width 100col%

\end_inset


\end_layout

\begin_layout Plain Layout
\align center

\emph on
Sur l'axe des abscisses nous avons l'avancement du produit et l'axe des
 ordonées représente l'indice de santé.
 Chaque croix représente un produit à l'instant t.
\end_layout

\end_inset


\end_layout

\begin_layout Section
Pistes d'amélioration
\end_layout

\begin_layout Standard
Différentes pistes potentielles sont à considérer pour l'implémentation
 industrielle du projet :
\end_layout

\begin_layout Itemize
Optimisation du temps de calcul (Choisir un langage plus proche de la machine
\begin_inset Foot
status open

\begin_layout Plain Layout
Le language C est un language particulièrement adapté dans ce type de problème
\end_layout

\end_inset

, optimisation des boucles, diminution du niveau de complexité de l'algorithme)
\end_layout

\begin_layout Itemize
Rajout de paramètre, en effet le problème dans la réalité est plus complexe
 que notre modélisation.
 La fiabilité que nous prenons est dans la réalité dépendante de la technologie
 observée.
 Les 
\emph on
MSL
\emph default
 et 
\emph on
MSE
\emph default
 sont découpées en des sous catégories qui dépendent des technologies analysées.
 De plus l'application d'un seuil à la fiabilité d'un lot fait perdre une
 partie de l'historique.
 
\end_layout

\begin_layout Itemize
Dans notre projet toutes les machines ont le même poids pour le calcul de
 la fiabilité.
 Ce qui diffère avec la réalité, c'est que certaines machines ont un poids
 plus important que d'autres.
\end_layout

\begin_layout Itemize
Interprétation des résultats, en effet il convient de définir au mieux l'interpr
étation que nous pourrons faire des résultats.
 Le tout n'est pas d'obtenir des chiffres mais il convient de les comprendre.
 Dans cette idée on peut associer la fiabilité calculée avec un pourcentage
 d'avancement de la fabrication du lot.
 
\end_layout

\begin_layout Itemize
Le paramétrage des machines pourrait se faire de manière plus fine en fonction
 de l'historique de la machine.
 Le Seuil minimal, le coefficient de dérèglement et la fiabilité par défaut
 de la machine.
 (Rentrer ces données à la main est impossible à cause du nombre d'entrée
\begin_inset Foot
status open

\begin_layout Plain Layout
6000 paramètres pour notre usine de fabrication
\end_layout

\end_inset

)
\end_layout

\end_body
\end_document
